{"version":3,"sources":["components/Card.js","components/CardList.js","actions/types.js","components/SearchBox.js","actions/actions.js","components/Scroll.js","components/Header.js","App.js","reducers/robot.js","reducers/search.js","reducers/index.js","store.js","serviceWorkerRegistration.js","index.js"],"names":["Card","robot","id","name","email","className","src","width","height","alt","connect","state","searchField","search","robots","filteredRobots","filter","toLowerCase","includes","map","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","dispatch","type","payload","aria-label","placeholder","onChange","e","target","value","Scroll","props","style","overflowY","border","children","Header","isPending","error","requestRobots","a","axios","get","res","data","useEffect","initialState","action","searchRobots","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a78d6f95.chunk.js","sourcesContent":["import React from 'react';\n\n// destructuring values from props\nconst Card = ({ robot: { id, name, email } }) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img\n\t\t\t\tsrc={`https://robohash.org/${id}?size=200x200`}\n\t\t\t\twidth='200'\n\t\t\t\theight='200'\n\t\t\t\talt='robots'\n\t\t\t/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport { connect } from 'react-redux';\n\nconst CardList = ({ searchField, robots }) => {\n\tconst filteredRobots = robots.filter(robot => {\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t{filteredRobots.map(robot => {\n\t\t\t\treturn <Card key={robot.id} robot={robot} />;\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nconst mapStateToProps = state => ({\n\tsearchField: state.search.searchField,\n\trobots: state.robot.robots,\n});\n\nexport default connect(mapStateToProps)(CardList);\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField } from '../actions/actions';\n\nconst SearchBox = ({ setSearchField }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\t\taria-label='Search Robots'\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='search robots'\n\t\t\t\tonChange={e => setSearchField(e.target.value)}\n\t\t\t\tname='searchfield'\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default connect(null, { setSearchField })(SearchBox);\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_FAILED,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS\n} from './types';\nimport axios from 'axios';\n\nexport const setSearchField = text => dispatch => {\n\tdispatch({\n\t\ttype: CHANGE_SEARCH_FIELD,\n\t\tpayload: text\n\t});\n};\n\n// get robots and dispatch response\nexport const requestRobots = () => async dispatch => {\n\ttry {\n\t\tdispatch({\n\t\t\ttype: REQUEST_ROBOTS_PENDING\n\t\t});\n\n\t\tconst res = await axios.get('https://jsonplaceholder.typicode.com/users/');\n\t\tconst data = res.data;\n\n\t\tdispatch({\n\t\t\ttype: REQUEST_ROBOTS_SUCCESS,\n\t\t\tpayload: data\n\t\t});\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: REQUEST_ROBOTS_FAILED,\n\t\t\tpayload: err\n\t\t});\n\t}\n};\n","import React from 'react';\n\nconst Scroll = props => {\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\toverflowY: 'scroll',\n\t\t\t\tborder: '1px solid black',\n\t\t\t\theight: '800px'\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;\n","import React from 'react';\n\nconst Header = () => {\n\treturn <h1 className='f1'>RoboFriends</h1>;\n};\n\nexport default Header;\n","import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from './components/CardList';\nimport SearchBox from './components/SearchBox';\nimport Scroll from './components/Scroll';\nimport Header from './components/Header';\n\n// redux stuff\nimport { requestRobots } from './actions/actions';\n\n// Css stuff\nimport 'tachyons';\nimport './app.css';\n\n// destructure props instead of props.isPending\nconst App = ({ isPending, requestRobots }) => {\n\tuseEffect(() => {\n\t\trequestRobots();\n\t\t// eslint-disable-next-line\n\t}, []);\n\n\treturn (\n\t\t<div className='tc'>\n\t\t\t<Header />\n\t\t\t<SearchBox />\n\t\t\t<Scroll>{isPending ? <h1>LOADING</h1> : <CardList />}</Scroll>\n\t\t</div>\n\t);\n};\n\n// state from the store\nconst mapStateToProps = state => ({\n\tisPending: state.robot.isPending,\n\terror: state.robot.error,\n});\n\n// to connect react / redux (state, actions)\nexport default connect(mapStateToProps, { requestRobots })(App);\n","import {\n\tREQUEST_ROBOTS_FAILED,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS\n} from '../actions/types';\n\nconst initialState = {\n\trobots: [],\n\tisPending: false,\n\terror: ''\n};\n\nconst requestRobots = (state = initialState, action) => {\n\tconst { type, payload } = action;\n\n\tswitch (type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisPending: true\n\t\t\t};\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\trobots: payload,\n\t\t\t\tisPending: false\n\t\t\t};\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\terror: payload,\n\t\t\t\tisPending: false\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default requestRobots;\n","import { CHANGE_SEARCH_FIELD } from '../actions/types';\n\nconst initialState = {\n\tsearchField: ''\n};\n\n// searchField reducers\nconst searchRobots = (state = initialState, action) => {\n\tconst { type, payload } = action;\n\n\tswitch (type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tsearchField: payload\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default searchRobots;\n","import { combineReducers } from 'redux';\n\nimport robot from './robot';\nimport search from './search';\n\nexport default combineReducers({\n\tsearch,\n\trobot\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n\trootReducer,\n\tinitialState,\n\tcomposeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}